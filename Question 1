#include <stdio.h>
#include <stdlib.h>

// Creating a structure for each node in binary tree, containing value of node and pointers to left and right child of node
struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Function to create a new node with value inputted by user.
struct TreeNode* newNode(int val) {
    struct TreeNode* node = (struct TreeNode*) malloc(sizeof(struct TreeNode)); //allocation of space for new node
    node->val = val;
    node->left = NULL; //null values because we are only creating node, not inserting yet
    node->right = NULL;
    return node;
}

// Function to insert a node into the binary tree.
struct TreeNode* insert(struct TreeNode* root, int val) {
    if (root == NULL) {
        return newNode(val);
    }

    if (val < root->val) {
        root->left = insert(root->left, val);
    } else {
        root->right = insert(root->right, val);
    }

    return root;
}

// Recursive Function to perform in-order traversal of binary tree.
void inOrder(struct TreeNode* root) {
    if (root != NULL) {
        inOrder(root->left);
        printf("%d ", root->val);
        inOrder(root->right);
    }
}

// Driver Code
int main() {
    struct TreeNode* root = NULL;
    int n, val;

    printf("Enter the number of nodes in the binary tree: ");
    scanf("%d", &n);

    printf("Enter the values of the nodes: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &val);
        root = insert(root, val);
    }

    printf("In-order traversal of binary tree is: ");
    inOrder(root);

    return 0;
}
